# COSSgpt

```elixir
import Ecto.Query
import Ecto.Changeset

alias Algora.{Accounts, Library, Repo, Storage, Cache, ML}

IEx.configure(inspect: [charlists: :as_lists])

if Code.ensure_loaded?(ExSync) && function_exported?(ExSync, :register_group_leader, 0) do
  ExSync.register_group_leader()
end
```

## Section

```elixir
defmodule COSSgpt do
  @dir "/home/zaf/Desktop/podcast audio"

  alias Algora.Library.Video

  def transcribe_video(id, filename) do
    video = Library.get_video!(id)

    index = ML.load_index!()

    IO.puts("\nâŒ› processing #{video.title}")

    video =
      case video.uuid do
        nil ->
          video |> change() |> Video.put_video_uuid() |> Repo.update!()

        _ ->
          video
      end

    slug = Video.slug(video)

    IO.puts("- uploading mp3 to tigris")

    Cache.fetch("#{slug}/upload", fn ->
      Storage.upload_from_filename("#{@dir}/#{filename}", "#{video.uuid}/index.mp3")
      :ok
    end)

    IO.puts("- transcribing audio")

    Cache.fetch("#{slug}/transcription", fn ->
      transcription = ML.transcribe_video("#{video.url_root}/index.mp3")

      :ok =
        transcription["chunks"]
        |> Enum.map(fn %{"text" => text, "timestamp" => [tstart, tend]} ->
          %Library.Subtitle{
            body: text,
            start: :erlang.float(tstart),
            end: :erlang.float(tend || video.duration),
            video_id: video.id
          }
        end)
        |> Enum.each(&Repo.insert!/1)

      transcription
    end)

    IO.puts("- chunking transcript")

    chunks = ML.chunk(video)

    IO.puts("- creating embeddings")

    embeddings =
      Cache.fetch("#{slug}/embeddings", fn ->
        ML.create_embeddings(chunks)
      end)

    IO.puts("- creating segments")

    segments =
      Cache.fetch("#{slug}/segments", fn ->
        segments =
          Enum.zip(chunks, embeddings)
          |> Enum.map(fn {chunk, embedding} ->
            %Library.Segment{chunk | embedding: embedding["embedding"]}
          end)
          |> Enum.map(&Repo.insert!/1)

        ML.add_embeddings(index, segments)

        segments
      end)

    segments
  end
end
```

```elixir
videos = [
  {6348, "Demo _ OSS Search _ Orama.mp3"},
  {6333, "Supertokens Interview Highlights.mp3"},
  {6313, "Hanko full interview.mp3"},
  {6363, "UnkeyCofounders.mp3"},
  {6424, "OpenBB Full Interview.mp3"},
  {6422, "Signoz Interview Highlights.mp3"},
  {6390, "Remotion Interview Highlights.mp3"},
  {6305, "Nango Interview Highlights.mp3"},
  {6347, "Linen Interview Highlights.mp3"},
  {6429, "Medplum Full Interview.mp3"},
  {6393, "Windmill Interview Highlights.mp3"},
  {6419, "Elementary Data Highlights.mp3"},
  {6400, "Sematic Interview Highlights.mp3"},
  {6300, "Infisical Interview Highlights.mp3"},
  {6421, "Novu Interview Highlights.mp3"},
  {6325, "Hydra Full Interview.mp3"},
  {6309, "shuttle.rs Interview Highlights.mp3"},
  {6402, "Ivy Interview Highlights.mp3"},
  {6411, "Nextcloud Interview Highlights.mp3"},
  {6425, "Okteto Interview Highlights .mp3"},
  {6405, "Tigris Data Interview Highlights.mp3"},
  {6415, "Refine Interview Highlights.mp3"},
  {6413, "Cal.com Interview Highlights.mp3"},
  {6302, "Hoppscotch Interview Highlights.mp3"},
  {6334, "MAIN-Documenso.mp3"},
  {6331, "GiteaFull.mp3"},
  {6336, "maybefull.mp3"},
  {6391, "NuxtFull.mp3"},
  {6327, "OramaFull.mp3"},
  {6430, "FinalTimeplusFullInterview.mp3"},
  {6295, "tursofull.mp3"},
  {6324, "unkeyfull.mp3"},
  {8540, "Tauri-Full-Final.mp3"},
  {8541, "TailcallFull-correct.mp3"},
  {8539, "millionfull.mp3"},
  {6426, "Scalarfullinterview.mp3"},
  {6387, "IHP Interview Highlights.mp3"},
  {8196, "peer-1.mp3"},
  {8236, "peer-2.mp3"},
  {8412, "peer-3.mp3"},
  {8428, "peer-4.mp3"},
  {8231, "andreas-1.mp3"},
  {8411, "andreas-2.mp3"},
  {8426, "andreas-3.mp3"}
]

for {id, filename} <- videos do
  COSSgpt.transcribe_video(id, filename)
end
```
